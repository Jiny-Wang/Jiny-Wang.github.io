<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gabrielle&#39;s Blog ~ – Biotools</title>
    <link>http://Jiny-Wang.github.io/docs/biotools/</link>
    <description>Recent content in Biotools on Gabrielle&#39;s Blog ~</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 10 Jun 2024 15:28:16 +0800</lastBuildDate>
    
	  <atom:link href="http://Jiny-Wang.github.io/docs/biotools/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Flaml-1-介绍</title>
      <link>http://Jiny-Wang.github.io/docs/biotools/flaml1/</link>
      <pubDate>Fri, 21 Jun 2024 15:20:00 +0800</pubDate>
      
      <guid>http://Jiny-Wang.github.io/docs/biotools/flaml1/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/FLAML/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FLAML&lt;/a&gt;是一个轻量级的 Python 库，用于机器学习和 AI 操作的高效自动化。它基于大型语言模型、机器学习模型等实现工作流程自动化，并优化其性能&lt;/p&gt;
&lt;h2&gt;主要特点&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;主要特点&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%b8%bb%e8%a6%81%e7%89%b9%e7%82%b9&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;FLAML 能够以最小的工作量构建基于多智能体对话的下一代 GPT-X 应用程序。它简化了复杂 GPT-X 工作流程的编排、自动化和优化。它最大限度地提高了 GPT-X 模型的性能并增强了它们的弱点。&lt;/li&gt;
&lt;li&gt;对于常见的机器学习任务（如分类和回归），它可以快速为计算资源较少的用户提供的数据找到高质量的模型。它易于定制或扩展。&lt;/li&gt;
&lt;li&gt;它支持快速、经济的自动调优，能够处理具有异构评估成本和复杂约束/引导/提前停止的大搜索空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;补充知识&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;补充知识&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%a1%a5%e5%85%85%e7%9f%a5%e8%af%86&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://www.aidoczh.com/autogen/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Autogen&lt;/a&gt;
通过多代理对话框架启用下一代大型语言模型(LLM)应用程序，可以实现类似于输入语言描述程序操作而自动执行的模式，暂未试用。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;import tempfile

temp_dir = tempfile.gettempdir()

arithmetic_agent = ConversableAgent(
    name=&amp;#34;算术代理&amp;#34;,
    llm_config=False,
    human_input_mode=&amp;#34;ALWAYS&amp;#34;,
    # 这个代理将始终需要人工输入，以确保代码执行安全。
    code_execution_config={&amp;#34;use_docker&amp;#34;: False, &amp;#34;work_dir&amp;#34;: temp_dir},
)

code_writer_agent = ConversableAgent(
    name=&amp;#34;代码撰写代理&amp;#34;,
    system_message=&amp;#34;你是一名代码撰写者。你可以在 Markdown 代码块中编写 Python 脚本。&amp;#34;,
    llm_config={&amp;#34;config_list&amp;#34;: [{&amp;#34;model&amp;#34;: &amp;#34;gpt-4&amp;#34;, &amp;#34;api_key&amp;#34;: os.environ[&amp;#34;OPENAI_API_KEY&amp;#34;]}]},
    human_input_mode=&amp;#34;NEVER&amp;#34;,
)

poetry_agent = ConversableAgent(
    name=&amp;#34;诗歌代理&amp;#34;,
    system_message=&amp;#34;你是一位 AI 诗人。&amp;#34;,
    llm_config={&amp;#34;config_list&amp;#34;: [{&amp;#34;model&amp;#34;: &amp;#34;gpt-4&amp;#34;, &amp;#34;api_key&amp;#34;: os.environ[&amp;#34;OPENAI_API_KEY&amp;#34;]}]},
    human_input_mode=&amp;#34;NEVER&amp;#34;,
)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;spark,大数据通用计算平台&lt;/p&gt;
&lt;h2&gt;使用&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;使用&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;安装&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;安装&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;pip install flaml
#在notebook上运行需要添加notebook参数，autogen同理
pip install &amp;#34;flaml[notebook]&amp;#34;
#conda
conda install flaml -c conda-forge&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h3&gt;训练&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;训练&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e8%ae%ad%e7%bb%83&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;flaml.AutoML 是面向任务的 AutoML 类。它可以用作具有标准 fit 和 predict 函数的 scikit-learn 样式估计器，x_train和y_train可以以以numpy array或pandas dataframe格式传入，模式如下：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;# Prepare training data
# ...
from flaml import AutoML

automl = AutoML()
other_settings = {
    &amp;#34;time_budget&amp;#34;: 500,  # 总时间上限(单位秒)
    “estimator_list” ：[&amp;#39;lgbm&amp;#39;, &amp;#39;rf&amp;#39;, &amp;#39;catboost&amp;#39;, &amp;#39;xgboost&amp;#39;, &amp;#39;extra_tree&amp;#39;, &amp;#39;xgb_limitdepth&amp;#39;]，
    &amp;#34;metric&amp;#34;: &amp;#39;roc_auc&amp;#39;,  # 候选可以是: &amp;#39;r2&amp;#39;, &amp;#39;rmse&amp;#39;, &amp;#39;mae&amp;#39;, &amp;#39;mse&amp;#39;, &amp;#39;accuracy&amp;#39;, &amp;#39;roc_auc&amp;#39;, &amp;#39;roc_auc_ovr&amp;#39;, &amp;#39;roc_auc_ovo&amp;#39;, &amp;#39;log_loss&amp;#39;, &amp;#39;mape&amp;#39;, &amp;#39;f1&amp;#39;, &amp;#39;ap&amp;#39;, &amp;#39;ndcg&amp;#39;, &amp;#39;micro_f1&amp;#39;, &amp;#39;macro_f1&amp;#39;
    &amp;#34;task&amp;#34;: &amp;#39;classification&amp;#39;,  # 任务类型
    &amp;#34;log_file_name&amp;#34;: &amp;#39;airlines_experiment.log&amp;#39;,  # flaml日志文件
    &amp;#34;seed&amp;#34;: 7654321,    # 随机种子
    &amp;#34;eval_method&amp;#34; : &amp;#39;cv&amp;#39;,
    &amp;#34;n_splits&amp;#34; : 5,
    #&amp;#34;ensemble&amp;#34; : True,
    &amp;#34;ensemble&amp;#34;: {
        &amp;#34;final_estimator&amp;#34;: LogisticRegression(),
        &amp;#34;passthrough&amp;#34;: False, #True (default) or False, whether to pass the original features to the stacker.
        &amp;#34;best_individual_model&amp;#34; : True
    },
    &amp;#34;n_jobs&amp;#34;: 4,

}
automl.fit(X_train, y_train, task=&amp;#34;regression&amp;#34;, time_budget=60, **other_settings)
# Save the model
with open(&amp;#34;automl.pkl&amp;#34;, &amp;#34;wb&amp;#34;) as f:
    pickle.dump(automl, f, pickle.HIGHEST_PROTOCOL)

# At prediction time
with open(&amp;#34;automl.pkl&amp;#34;, &amp;#34;rb&amp;#34;) as f:
    automl = pickle.load(f)
pred = automl.predict(X_test)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;预定义参数
Tasks (specified via task):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;lsquo;classification&amp;rsquo;&lt;/strong&gt;: classification with tabular data.  &lt;br&gt;
&lt;strong&gt;&amp;lsquo;regression&amp;rsquo;&lt;/strong&gt;: regression with tabular data.   &lt;br&gt;
&amp;rsquo;ts_forecast&amp;rsquo;: time series forecasting.  &lt;br&gt;
&amp;rsquo;ts_forecast_classification&amp;rsquo;: time series forecasting for classification.    &lt;br&gt;
&amp;rsquo;ts_forecast_panel&amp;rsquo;: time series forecasting for panel datasets (multiple time series).  &lt;br&gt;
&amp;lsquo;rank&amp;rsquo;: learning to rank.   &lt;br&gt;
&amp;lsquo;seq-classification&amp;rsquo;: sequence classification.  &lt;br&gt;
&amp;lsquo;seq-regression&amp;rsquo;: sequence regression.  &lt;br&gt;
&amp;lsquo;summarization&amp;rsquo;: text summarization.  &lt;br&gt;
&amp;rsquo;token-classification&amp;rsquo;: token classification.   &lt;br&gt;
&lt;strong&gt;&amp;lsquo;multichoice-classification&amp;rsquo;&lt;/strong&gt;: multichoice classification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Built-in metric.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;accuracy&amp;rsquo;: 1 - accuracy as the corresponding metric to minimize.&lt;br&gt;
&amp;rsquo;log_loss&amp;rsquo;: default metric for multiclass classification.&lt;br&gt;
&amp;lsquo;r2&amp;rsquo;: 1 - r2_score as the corresponding metric to minimize. Default metric for regression.&lt;br&gt;
&amp;lsquo;rmse&amp;rsquo;: root mean squared error.&lt;br&gt;
&amp;lsquo;mse&amp;rsquo;: mean squared error.&lt;br&gt;
&amp;lsquo;mae&amp;rsquo;: mean absolute error.&lt;br&gt;
&amp;lsquo;mape&amp;rsquo;: mean absolute percentage error.&lt;br&gt;
&amp;lsquo;roc_auc&amp;rsquo;: minimize 1 - roc_auc_score. Default metric for binary classification.&lt;br&gt;
&amp;lsquo;roc_auc_ovr&amp;rsquo;: minimize 1 - roc_auc_score with multi_class=&amp;ldquo;ovr&amp;rdquo;.&lt;br&gt;
&amp;lsquo;roc_auc_ovo&amp;rsquo;: minimize 1 - roc_auc_score with multi_class=&amp;ldquo;ovo&amp;rdquo;.&lt;br&gt;
&amp;lsquo;roc_auc_weighted&amp;rsquo;: minimize 1 - roc_auc_score with average=&amp;ldquo;weighted&amp;rdquo;.&lt;br&gt;
&amp;lsquo;roc_auc_ovr_weighted&amp;rsquo;: minimize 1 - roc_auc_score with multi_class=&amp;ldquo;ovr&amp;rdquo; and average=&amp;ldquo;weighted&amp;rdquo;.&lt;br&gt;
&amp;lsquo;roc_auc_ovo_weighted&amp;rsquo;: minimize 1 - roc_auc_score with multi_class=&amp;ldquo;ovo&amp;rdquo; and average=&amp;ldquo;weighted&amp;rdquo;.&lt;br&gt;
&amp;lsquo;f1&amp;rsquo;: minimize 1 - f1_score.&lt;br&gt;
&amp;lsquo;micro_f1&amp;rsquo;: minimize 1 - f1_score with average=&amp;ldquo;micro&amp;rdquo;.&lt;br&gt;
&amp;lsquo;macro_f1&amp;rsquo;: minimize 1 - f1_score with average=&amp;ldquo;macro&amp;rdquo;.&lt;br&gt;
&amp;lsquo;ap&amp;rsquo;: minimize 1 - average_precision_score.&lt;br&gt;
&amp;rsquo;ndcg&amp;rsquo;: minimize 1 - ndcg_score.&lt;br&gt;
&amp;rsquo;ndcg@k&amp;rsquo;: minimize 1 - ndcg_score@k. k is an integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以自定义损失，如：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;def custom_metric(
    X_val,
    y_val,
    estimator,
    labels,
    X_train,
    y_train,
    weight_val=None,
    weight_train=None,
    *args,
):
    from sklearn.metrics import log_loss
    import time

    start = time.time()
    y_pred = estimator.predict_proba(X_val)
    pred_time = (time.time() - start) / len(X_val)
    val_loss = log_loss(y_val, y_pred, labels=labels, sample_weight=weight_val)
    y_pred = estimator.predict_proba(X_train)
    train_loss = log_loss(y_train, y_pred, labels=labels, sample_weight=weight_train)
    alpha = 0.5
    return val_loss * (1 &amp;#43; alpha) - alpha * train_loss, {
        &amp;#34;val_loss&amp;#34;: val_loss,
        &amp;#34;train_loss&amp;#34;: train_loss,
        &amp;#34;pred_time&amp;#34;: pred_time,
    }&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;返回验证损失和训练损失之间的差距所惩罚的验证损失作为要最小化的指标,此时用户还可以在附加指标字典中指定对一个或多个指标的约束，如下：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;metric_constraints = [(&amp;#34;train_loss&amp;#34;, &amp;#34;&amp;lt;=&amp;#34;, 0.1), (&amp;#34;val_loss&amp;#34;, &amp;#34;&amp;lt;=&amp;#34;, 0.1)]
automl.fit(
    X_train,
    y_train,
    max_iter=100,
    train_time_limit=1,
    metric_constraints=metric_constraints,
)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Estimator list ,模型列表列表可以包含一个或多个估算器名称，每个名称对应于一个内置估算器或自定义估算器。每个估算器都有一个超参数配置的搜索空间。FLAML 支持经典机器学习模型和深度神经网络。同样也可以自定义模型和搜索空间&lt;/p&gt;
&lt;p&gt;Built-in estimator.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;rsquo;lgbm&amp;rsquo;&lt;/strong&gt;: LGBMEstimator for task &amp;ldquo;classification&amp;rdquo;, &amp;ldquo;regression&amp;rdquo;, &amp;ldquo;rank&amp;rdquo;, &amp;ldquo;ts_forecast&amp;rdquo; and &amp;ldquo;ts_forecast_classification&amp;rdquo;. Hyperparameters: n_estimators, num_leaves, min_child_samples, learning_rate, log_max_bin (logarithm of (max_bin + 1) with base 2), colsample_bytree, reg_alpha, reg_lambda.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;xgboost&amp;rsquo;&lt;/strong&gt;: XGBoostSkLearnEstimator for task &amp;ldquo;classification&amp;rdquo;, &amp;ldquo;regression&amp;rdquo;, &amp;ldquo;rank&amp;rdquo;, &amp;ldquo;ts_forecast&amp;rdquo; and &amp;ldquo;ts_forecast_classification&amp;rdquo;. Hyperparameters: n_estimators, max_leaves, min_child_weight, learning_rate, subsample, colsample_bylevel, colsample_bytree, reg_alpha, reg_lambda.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;xgb_limitdepth&amp;rsquo;&lt;/strong&gt;: XGBoostLimitDepthEstimator for task &amp;ldquo;classification&amp;rdquo;, &amp;ldquo;regression&amp;rdquo;, &amp;ldquo;rank&amp;rdquo;, &amp;ldquo;ts_forecast&amp;rdquo; and &amp;ldquo;ts_forecast_classification&amp;rdquo;. Hyperparameters: n_estimators, max_depth, min_child_weight, learning_rate, subsample, colsample_bylevel, colsample_bytree, reg_alpha, reg_lambda.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;rf&amp;rsquo;&lt;/strong&gt;: RandomForestEstimator for task &amp;ldquo;classification&amp;rdquo;, &amp;ldquo;regression&amp;rdquo;, &amp;ldquo;ts_forecast&amp;rdquo; and &amp;ldquo;ts_forecast_classification&amp;rdquo;. Hyperparameters: n_estimators, max_features, max_leaves, criterion (for classification only). Starting from v1.1.0, it uses a fixed random_state by default.&lt;br&gt;
&lt;strong&gt;&amp;rsquo;extra_tree&amp;rsquo;&lt;/strong&gt;: ExtraTreesEstimator for task &amp;ldquo;classification&amp;rdquo;, &amp;ldquo;regression&amp;rdquo;, &amp;ldquo;ts_forecast&amp;rdquo; and &amp;ldquo;ts_forecast_classification&amp;rdquo;. Hyperparameters: n_estimators, max_features, max_leaves, criterion (for classification only). Starting from v1.1.0, it uses a fixed random_state by default.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;histgb&amp;rsquo;&lt;/strong&gt;: HistGradientBoostingEstimator for task &amp;ldquo;classification&amp;rdquo;, &amp;ldquo;regression&amp;rdquo;, &amp;ldquo;ts_forecast&amp;rdquo; and &amp;ldquo;ts_forecast_classification&amp;rdquo;. Hyperparameters: n_estimators, max_leaves, min_samples_leaf, learning_rate, log_max_bin (logarithm of (max_bin + 1) with base 2), l2_regularization. It uses a fixed random_state by default.&lt;br&gt;
&lt;strong&gt;&amp;rsquo;lrl1&amp;rsquo;&lt;/strong&gt;: LRL1Classifier (sklearn.LogisticRegression with L1 regularization) for task &amp;ldquo;classification&amp;rdquo;. Hyperparameters: C.&lt;br&gt;
&lt;strong&gt;&amp;rsquo;lrl2&amp;rsquo;&lt;/strong&gt;: LRL2Classifier (sklearn.LogisticRegression with L2 regularization) for task &amp;ldquo;classification&amp;rdquo;. Hyperparameters: C.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;catboost&amp;rsquo;&lt;/strong&gt;: CatBoostEstimator for task &amp;ldquo;classification&amp;rdquo; and &amp;ldquo;regression&amp;rdquo;. Hyperparameters: early_stopping_rounds, learning_rate, n_estimators.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;kneighbor&amp;rsquo;&lt;/strong&gt;: KNeighborsEstimator for task &amp;ldquo;classification&amp;rdquo; and &amp;ldquo;regression&amp;rdquo;. Hyperparameters: n_neighbors.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;prophet&amp;rsquo;&lt;/strong&gt;: Prophet for task &amp;ldquo;ts_forecast&amp;rdquo;. Hyperparameters: changepoint_prior_scale, seasonality_prior_scale, holidays_prior_scale, seasonality_mode.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;arima&amp;rsquo;&lt;/strong&gt;: ARIMA for task &amp;ldquo;ts_forecast&amp;rdquo;. Hyperparameters: p, d, q.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;sarimax&amp;rsquo;&lt;/strong&gt;: SARIMAX for task &amp;ldquo;ts_forecast&amp;rdquo;. Hyperparameters: p, d, q, P, D, Q, s.&lt;br&gt;
&lt;strong&gt;&amp;lsquo;holt-winters&amp;rsquo;&lt;/strong&gt;: Holt-Winters (triple exponential smoothing) model for task &amp;ldquo;ts_forecast&amp;rdquo;. Hyperparameters: seasonal_perdiods, seasonal, use_boxcox, trend, damped_trend.&lt;br&gt;
&lt;strong&gt;&amp;rsquo;transformer&amp;rsquo;&lt;/strong&gt;: Huggingface transformer models for task &amp;ldquo;seq-classification&amp;rdquo;, &amp;ldquo;seq-regression&amp;rdquo;, &amp;ldquo;multichoice-classification&amp;rdquo;, &amp;ldquo;token-classification&amp;rdquo; and &amp;ldquo;summarization&amp;rdquo;. Hyperparameters: learning_rate, num_train_epochs, per_device_train_batch_size, warmup_ratio, weight_decay, adam_epsilon, seed.&lt;br&gt;
&lt;strong&gt;&amp;rsquo;temporal_fusion_transformer&amp;rsquo;&lt;/strong&gt;: TemporalFusionTransformerEstimator for task &amp;ldquo;ts_forecast_panel&amp;rdquo;. Hyperparameters: gradient_clip_val, hidden_size, hidden_continuous_size, attention_head_size, dropout, learning_rate. There is a known issue with pytorch-forecast logging.&lt;br&gt;
对于每一个模型可以额外定义参数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;automl_settings = {
    &amp;#34;task&amp;#34;: &amp;#34;classification&amp;#34;,
    &amp;#34;time_budget&amp;#34;: 10,
    &amp;#34;estimator_list&amp;#34;: [&amp;#34;catboost&amp;#34;, &amp;#34;rf&amp;#34;],
    &amp;#34;fit_kwargs_by_estimator&amp;#34;: {
        &amp;#34;catboost&amp;#34;: {
            &amp;#34;verbose&amp;#34;: True,  # setting the verbosity of catboost to True
        }
    },
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;训练时间的范围确定
关于时间的参数包括：
”time_budget“
&amp;ldquo;max_iter&amp;rdquo; : 30,#限制在 AutoML 进程中尝试的最大模型数
&amp;ldquo;train_time_limit&amp;rdquo; ：1,#训练时间(s)
“pred_time_limit ”：1e-3，#每个实例的预测时间（s）&lt;/p&gt;
&lt;p&gt;如果希望时间有约束，可以设置time_budget参数，那么它的大小怎么设置呢？可以先设置一个较短的时间，之后查看日志有没有提示时间过短&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;WARNING - All estimator hyperparameters local search has converged at least once, and the total search time exceeds 10 times the time taken to find the best model.&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;或设置一个较长时间，但是而外设置early_stop=True，就会在有收敛之后自动停止
如果想了解大约需要多少时间，可以先设置  max_iter=2  ，就会在日志计算预估的所需时间&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;INFO - Estimated sufficient time budget=145194s. Estimated necessary time budget=2118s.&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;并行（默认1）
n_jobs，几个线程
n_concurrent_trials，几个核，当有多个cpu时可以增加
那么如何实现并行：
1，Parallel tuning with Ray&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;pip install flaml[ray,blendsearch]
ray.init(num_cpus=16)
automl.fit(X_train, y_train, n_jobs=4, n_concurrent_trials=4)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;2,Parallel tuning with Spark,试行，不支持gpu。&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;pip install flaml[spark,blendsearch]&amp;gt;=1.1.0
automl.fit(X_train, y_train, n_concurrent_trials=4, use_spark=True)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h3&gt;集成模型&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;集成模型&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e9%9b%86%e6%88%90%e6%a8%a1%e5%9e%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;采用sklearn的 stack方法&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;automl.fit(
    X_train, y_train, task=&amp;#34;classification&amp;#34;,
    &amp;#34;ensemble&amp;#34;: {
        &amp;#34;final_estimator&amp;#34;: LogisticRegression(),##最终估算器
        &amp;#34;passthrough&amp;#34;: False,###是否将原始特征传递给stacker
    },
)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h3&gt;Resampling strategy​ 重采样策略&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;resampling-strategy-重采样策略&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#resampling-strategy-%e9%87%8d%e9%87%87%e6%a0%b7%e7%ad%96%e7%95%a5&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;eval_method to be &amp;ldquo;holdout&amp;rdquo; or &amp;ldquo;cv&amp;rdquo; for holdout or cross-validation.
对于holdout，可选split_ratio ：验证数据的分数，默认为 0.1；X_val ， y_val单独的验证数据集
对于cv,可设置n_splits 折叠数。默认情况下，它是 5&lt;/p&gt;
&lt;h3&gt;数据拆分方式&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;数据拆分方式&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e6%8b%86%e5%88%86%e6%96%b9%e5%bc%8f&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;对于不同类型模型有不同拆分方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stratified split for classification;
分层拆分进行分类;
uniform split for regression;
回归的均匀拆分;
time-based split for time series forecasting;
用于时间序列预测的基于时间的拆分;
group-based split for learning to rank.
基于小组的拆分，用于学习排名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;split_type=&amp;ldquo;uniform&amp;rdquo; 改为统一分割。当 split_type in (&amp;ldquo;uniform&amp;rdquo;, &amp;ldquo;stratified&amp;rdquo;) 时，数据被洗牌
对于分类和回归模型还可以设置
split_type=&amp;ldquo;time&amp;rdquo;
split_type=&amp;ldquo;group&amp;rdquo;&lt;/p&gt;
&lt;h3&gt;warm start(不想每次都从头开始训练)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;warm-start不想每次都从头开始训练&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#warm-start%e4%b8%8d%e6%83%b3%e6%af%8f%e6%ac%a1%e9%83%bd%e4%bb%8e%e5%a4%b4%e5%bc%80%e5%a7%8b%e8%ae%ad%e7%bb%83&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;automl1 = AutoML()
automl1.fit(X_train, y_train, time_budget=3600)
automl2 = AutoML()
automl2.fit(
    X_train,
    y_train,
    time_budget=7200,
    starting_points=automl1.best_config_per_estimator,
)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;结果&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;结果&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e7%bb%93%e6%9e%9c&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;以此句为例&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;automl.fit(X_train, y_train, task=&amp;#34;regression&amp;#34;)
print(automl.model)
# &amp;lt;flaml.automl.model.LGBMEstimator object at 0x7f9b502c4550&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;#最佳模型
print(automl.best_estimator)
# lgbm
#最佳参数
print(automl.best_config)
# {&amp;#39;n_estimators&amp;#39;: 148, &amp;#39;num_leaves&amp;#39;: 18, &amp;#39;min_child_samples&amp;#39;: 3, &amp;#39;learning_rate&amp;#39;: 0.17402065726724145, &amp;#39;log_max_bin&amp;#39;: 8, &amp;#39;colsample_bytree&amp;#39;: 0.6649148062238498, &amp;#39;reg_alpha&amp;#39;: 0.0009765625, &amp;#39;reg_lambda&amp;#39;: 0.0067613624509965}
#每个模型的最佳参数
print(automl.best_config_per_estimator)
# {&amp;#39;lgbm&amp;#39;: {&amp;#39;n_estimators&amp;#39;: 148, &amp;#39;num_leaves&amp;#39;: 18, &amp;#39;min_child_samples&amp;#39;: 3, &amp;#39;learning_rate&amp;#39;: 0.17402065726724145, &amp;#39;log_max_bin&amp;#39;: 8, &amp;#39;colsample_bytree&amp;#39;: 0.6649148062238498, &amp;#39;reg_alpha&amp;#39;: 0.0009765625, &amp;#39;reg_lambda&amp;#39;: 0.0067613624509965}, &amp;#39;rf&amp;#39;: None, &amp;#39;catboost&amp;#39;: None, &amp;#39;xgboost&amp;#39;: {&amp;#39;n_estimators&amp;#39;: 4, &amp;#39;max_leaves&amp;#39;: 4, &amp;#39;min_child_weight&amp;#39;: 1.8630223791106992, &amp;#39;learning_rate&amp;#39;: 1.0, &amp;#39;subsample&amp;#39;: 0.8513627344387318, &amp;#39;colsample_bylevel&amp;#39;: 1.0, &amp;#39;colsample_bytree&amp;#39;: 0.946138073111236, &amp;#39;reg_alpha&amp;#39;: 0.0018311776973217073, &amp;#39;reg_lambda&amp;#39;: 0.27901659190538414}, &amp;#39;extra_tree&amp;#39;: {&amp;#39;n_estimators&amp;#39;: 4, &amp;#39;max_features&amp;#39;: 1.0, &amp;#39;max_leaves&amp;#39;: 4}}
#训练时间
print(automl.best_config_train_time)
# 0.24841618537902832
#训练次数
print(automl.best_iteration)
# 10
#最佳loss
print(automl.best_loss)
# 0.15448622217577546
#找到最佳模型所用时间
print(automl.time_to_find_best_model)
# 0.4167296886444092
#
print(automl.config_history)
# {0: (&amp;#39;lgbm&amp;#39;, {&amp;#39;n_estimators&amp;#39;: 4, &amp;#39;num_leaves&amp;#39;: 4, &amp;#39;min_child_samples&amp;#39;: 20, &amp;#39;learning_rate&amp;#39;: 0.09999999999999995, &amp;#39;log_max_bin&amp;#39;: 8, &amp;#39;colsample_bytree&amp;#39;: 1.0, &amp;#39;reg_alpha&amp;#39;: 0.0009765625, &amp;#39;reg_lambda&amp;#39;: 1.0}, 1.2300517559051514)}
# Meaning: at iteration 0, the config tried is {&amp;#39;n_estimators&amp;#39;: 4, &amp;#39;num_leaves&amp;#39;: 4, &amp;#39;min_child_samples&amp;#39;: 20, &amp;#39;learning_rate&amp;#39;: 0.09999999999999995, &amp;#39;log_max_bin&amp;#39;: 8, &amp;#39;colsample_bytree&amp;#39;: 1.0, &amp;#39;reg_alpha&amp;#39;: 0.0009765625, &amp;#39;reg_lambda&amp;#39;: 1.0} for lgbm, and the wallclock time is 1.23s when this trial is finished.&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;flaml.automl.model.LGBMEstimator is a wrapper class（包装类）&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;print(automl.model.estimator)
&amp;#34;&amp;#34;&amp;#34;
LGBMRegressor(colsample_bytree=0.7610534336273627,
              learning_rate=0.41929025492645006, max_bin=255,
              min_child_samples=4, n_estimators=45, num_leaves=4,
              reg_alpha=0.0009765625, reg_lambda=0.009280655005879943,
              verbose=-1)
&amp;#34;&amp;#34;&amp;#34;
#绘制特征重要性
import matplotlib.pyplot as plt

plt.barh(
    automl.model.estimator.feature_name_, automl.model.estimator.feature_importances_
)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h2&gt;准确度与时间绘图&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;准确度与时间绘图&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%87%86%e7%a1%ae%e5%ba%a6%e4%b8%8e%e6%97%b6%e9%97%b4%e7%bb%98%e5%9b%be&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;增加时间预算可能会进一步提高准确性&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;from flaml.automl.data import get_output_from_log

time_history, best_valid_loss_history, valid_loss_history, config_history, metric_history =
    get_output_from_log(filename=settings[&amp;#34;log_file_name&amp;#34;], time_budget=120)

import matplotlib.pyplot as plt
import numpy as np

plt.title(&amp;#34;Learning Curve&amp;#34;)
plt.xlabel(&amp;#34;Wall Clock Time (s)&amp;#34;)
plt.ylabel(&amp;#34;Validation Accuracy&amp;#34;)
plt.step(time_history, 1 - np.array(best_valid_loss_history), where=&amp;#34;post&amp;#34;)
plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
