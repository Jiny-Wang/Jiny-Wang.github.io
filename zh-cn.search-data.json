{"/about/":{"data":{"":"网页搭建依托hugo，感谢主题Hextra的提供团队，感谢github."},"title":"About"},"/blog/":{"data":{"here-is-blogs-1#here is blogs 1":"here is blogs 1"},"title":"Blog"},"/blog/%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%B5%8B%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/":{"data":{"test-seq#test seq":"test seq"},"title":"test seq"},"/blog/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99%E7%9B%B8%E5%85%B3/":{"data":{"test-seq#test seq":"test seq"},"title":"test seq"},"/blog/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%AB%99%E7%9B%B8%E5%85%B3/hugo_github_buildblog/":{"data":{"":"平台：macbook\n时间：2024.6\n参考：\nhugo教程：https://hugo.opendocs.io/getting-started/quick-start/\nhextra主题：https://imfing.github.io/hextra/docs/getting-started/\n其他大佬的分享：https://krislinzhao.github.io/docs/create-a-wesite-using-github-pages-and-hugo/\nhttps://www.gohugo.org/","hogu创建站点#hogu创建站点":"仿照krislinzhao分享的教程，创建2个 GitHub 仓库，1个源仓库：用于储存所有 Markdown 、图片等。勾选 Pricate，设置为私人仓库。\n1个GitHub Pages 仓库：储存由 Hugo 从Markdown 文件生成的 HTML 文件。命名为\u003cusername.github.io\u003e（严格规范），设置为公开仓库。\n这样就可以在本地博客源仓库中进行修改，之后 Hugo 生成的静态 HTML 文件部署到远端 GitHub Pages 仓库中。当然也可以都放在一个仓库。\nhugo new site BlogSource #由于选择的主题的要求，我再加一个参数 hugo new site BlogSource --format=yaml 下载主题,主题可以从[官方]（https://themes.gohugo.io/）查找\ngit init git submodule add https://github.com/imfing/hextra.git themes/hextra #在hugo.yaml中增加 theme: hextra 创建文档\nhugo new about.md 生成的md文件自动产生于 content目录下，文档格式为：\n+++ date = \"2015-10-25T08:36:54-07:00\" draft = true title = \"about\" +++ date是文件创建日期；draft: true代表这篇文章是一个草稿，Hugo 不会显示草稿，要在主页显示添加的文章，可以设置 draft: false 此时已经已经可以在本地进行预览：\nhugo server --buildDrafts --disableFastRender ","工具配置#工具配置":"hugo\nbrew install hugo 其他平台参考官方手册 git安装","文件架构#文件架构":"文件组织架构可以理解为目录的结构，需要结合使用的主题进行实践探索\nkrislinzhao分享的教程中提到可以把theme的exampleSite中文件直接复制过来，以减少许多问题，但对我所使用的主题hextra不起作用，有幸hextra也提供了很完整的教程,尤其是已经配置了github的工作流，可以直接复制它的项目进行一点内容的修改就可以直接用了。\nhextra主题支持的架构如下：\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ _index.md是索引，会自定根据你的文件夹结构进行侧边栏的层次设置","部署到到github-pages-git同步#部署到到GitHub pages Git同步":"我们已经建立了一个初具雏形的网页，对我来讲我还需要对它进行一个“部署”的操作，也是教程非常清晰了,在目录新建.github/workflows/pages.yaml文件，按照教程填好内容即可。\n之后就可以走git的流程啦\n$ hugo -t $ cd public # 切换到本地存储网站内容的文件夹（假设名称为public） $ #git init # 在当前文件夹中初始化一个新的 Git 仓库,只在第一次使用 $ #git remote add origin https://github.com/coderzh/coderzh.github.io.git # 将本地仓库关联到远程仓库，#只在第一次使用 $ git add -A # 将所有更改的文件添加到 Git 暂存区 $ git commit -m \"first commit\" # 提交更改并附上提交信息 \"first commit\" $ git push -u origin master # 将本地仓库的内容推送到远程仓库的 master 分支，并设置 \"origin\" 作为默认远程仓库 后面已经有一些数据的时候再次推送新的内容 git status\n# 从远程拉去项目 #git clone xxx # 切换到主分支，即main分支 git switch main # 将master分支合并到main分支上 git merge --no-ff master # 提供commit git commit -m \"合并master\" # 推送到远程main分支 git push # 删除远程分支 git push -d origin master #强制推送到main\ngit push -f origin main hugo –theme=hextra –baseURL=“http://Jiny-Wang.github.io/\"\n至此，暂结。"},"title":"hugo联合github搭建blog"},"/blog/%E7%A8%80%E5%A5%87%E5%8F%A4%E6%80%AA%E6%8A%A5%E9%94%99/":{"data":{"稀奇古怪#稀奇古怪":"稀奇古怪"},"title":"test seq"},"/docs/":{"data":{"docsindexmd#docs/index.md":"docs/index.md"},"title":"Docs"},"/docs/genome_seq/":{"data":{"test-seq#test seq":"test seq"},"title":"test seq"},"/docs/guide/":{"data":{"here-is-guide#here is guide":"here is guide"},"title":"Guide"},"/docs/paper_share/":{"data":{"here-is-guide#here is guide":"here is guide"},"title":"paper share"}}